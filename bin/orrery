#!perl

use 5.12.0;
use strict;
use warnings;

use File::Basename;
use Curses::Orrery;
use Getopt::Std;
use Math::Units qw(convert);
use Scalar::Util qw(looks_like_number);


$Getopt::Std::STANDARD_HELP_VERSION = 1;

sub main::HELP_MESSAGE {
    my $script_name = basename($0);
    print <<"END";

Usage:
     $script_name [ -a | -u] LATITUDE LONGITUDE [ALTITUDE]

Options:
        -a               Display planets as letters
        -u               Display planets as planetary symbols
                         (default if your locale is a Unicode one)

LATITUDE and LONGITUDE can be decimal or "(-)HH:MM:SS".
ALTITUDE assumes meters if no unit is specified.
END
}

sub main::VERSION_MESSAGE {
    print basename($0), ' ', $Curses::Orrery::VERSION, "\n";
}

sub main {
    my ($opt_a, $opt_u);
    getopts('au');

    my ($lat, $long, $alt) = @ARGV;

    # parse altitude
    $alt //= 0;
    if ($alt =~ /^(\d+)\s*([a-z]+)$/i) {
        $alt = convert($1, $2, 'meters');
    }

    # error out if args aren't sane
    unless (defined $lat && defined $long && looks_like_number $alt) {
        main::VERSION_MESSAGE;
        main::HELP_MESSAGE;
        exit 1;
    }

    # unicode defaults to on unless -a is specified.
    # Curses::Orrery will turn it off if unsupported
    my $unicode = !$opt_a;

    # start up a Curses::Orrery
    my $orrery = Curses::Orrery->new(long    => $long,
                                     lat     => $lat,
                                     alt     => $alt,
                                     unicode => $unicode);
    $orrery->run;

    exit 0;
}


&main;
